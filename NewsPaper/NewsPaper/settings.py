"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^%@_db(#t7w0*-8m+fpy_j7i)*@*c9pn-_=beq)-211vkqjpff'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django_apscheduler',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'django.contrib.flatpages',
    'news',
    'accounts',
    'mc_donalds',
    'simpleapp',
    'django_filters',
    'NewsPortal.apps.NewsPortalConfig',
    'django_celery_beat'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'NewsPortal.context_processors.social_login_buttons',
                'django.template.context_processors.request',
                'NewsPortal.context_processors.site_settings',
                'NewsPortal.context_processors.site_info',
            ],
        },
    },
]
SITE_NAME = 'NewsPortal'

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 60,
        }
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILES_DIRS = [
    BASE_DIR / "static"
]
STATIC_ROOT = BASE_DIR / 'staticfiles'
SITE_ID = 1

# Настройки allauth
ACCOUNT_UNIQUE_EMAIL = True  # Уникальный email
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Обязательная верификация email
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # Подтверждение при переходе по ссылке
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3  # Срок действия ссылки (дни)
ACCOUNT_LOGIN_METHODS = ['email']  # Вход по email
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'  # Для Yandex
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = 'Zonanso@yandex.ru'
EMAIL_HOST_PASSWORD = 'oigyxxpjsmnqmxnx'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'yandex': {
        'APP': {
            'client_id': '779ca1891b9a47acb9867c32da8add44',
            'secret': 'd69cfdea33414338a7a9100c476a0b90',
            'key': ''
        },
        'SCOPE': ['login:email', 'login:info'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/news/'

CSRF_TRUSTED_ORIGINS = ['http://localhost:8000']
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# Настройки логирования
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console_debug': {
            'format': '%(asctime)s %(levelname)s: %(message)s',
        },
        'console_warning': {
            'format': '%(asctime)s %(levelname)s: %(message)s\nPath: %(pathname)s',
        },
        'console_error': {
            'format': '%(asctime)s %(levelname)s: %(message)s\nPath: %(pathname)s\nStack: %(exc_info)s',
        },
        'general_file': {
            'format': '%(asctime)s %(levelname)s: %(message)s [%(module)s]',
        },
        'error_file': {
            'format': '%(asctime)s %(levelname)s: %(message)s\nPath: %(pathname)s\nStack: %(exc_info)s',
        },
        'security_file': {
            'format': '%(asctime)s %(levelname)s: %(message)s [%(module)s]',
        },
        'mail': {
            'format': '%(asctime)s %(levelname)s: %(message)s\nModule: %(module)s\nPath: %(pathname)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_debug',
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_warning',
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_error',
        },
        'general_file': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'general_file',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'error_file',
        },
        'security_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'security_file',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_debug', 'console_warning', 'console_error', 'general_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True

ACCOUNT_FORMS = {
    'login': 'NewsPortal.forms.CustomLoginForm',
    'signup': 'NewsPortal.forms.CustomSignupForm',
}
SITE_URL = 'localhost:8000'
SERVER_EMAIL = 'Zonanso@yandex.ru'
DEFAULT_FROM_EMAIL = 'Zonanso@yandex.ru'

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

ADMIN_EMAIL = 'Zonanso@yandex.ru'

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TASK_ALWAYS_EAGER = True

ADMINS = [
    ('Sergei', 'sergei_mor@bk.ru'),
]

EMAIL_SUBJECT_PREFIX = '[Django Errors] '  # Префикс для тем писем
EMAIL_USE_TLS = True

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

LOGGING['handlers']['general_file']['filename'] = os.path.join(LOG_DIR, 'general.log')
LOGGING['handlers']['error_file']['filename'] = os.path.join(LOG_DIR, 'errors.log')
LOGGING['handlers']['security_file']['filename'] = os.path.join(LOG_DIR, 'security.log')
